name: Release

on:
  push:
    tags:
      - '*'

env:
  NATIVE_TEST_MAVEN_OPTS: "-e -B -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.0.0-java11"

jobs:
  build-jdk11:
    name: "JDK 11 Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Compute cache restore key
        # Always recompute on a push so that the maven repo doesnt grow indefinitely with old versions
        run: |
          if ${{ github.event_name == 'pull_request' }}; then echo "::set-env name=COMPUTED_RESTORE_KEY::q2maven-"; fi
      - name: Cache Maven Repository
        id: cache-maven
        uses: n1hility/cache@v2
        with:
          path: ~/.m2/repository
          # Improves the reusability of the cache to limit key changes
          key: q2maven-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ env.COMPUTED_RESTORE_KEY }}
          restore-only: ${{ github.event_name == 'pull_request' }}
      - name: Build
        run: |
          mvn -e -B  -DskipTests=true -DskipDocs clean install
      - name: Tar Maven Repo
        shell: bash
        run: tar -czvf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v1
        with:
          name: maven-repo
          path: maven-repo.tgz

  java-artifacts:
    name: Java Artifacts
    needs: build-jdk11
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          ./mvnw package
      - name: Prepare XML Builder archive
        shell: bash
        run: |
          find api/target -name 'lib' -o -name 'xml-builder-*-runner.jar' | tar -czvf jvm-artifacts.tgz -T -
      - name: Upload Archive XML Builder
        uses: actions/upload-artifact@v1
        with:
          name: jvm-artifacts
          path: 'jvm-artifacts.tgz'


  native-container-artifacts:
    name: Native Container Artifacts JDK11
    needs: build-jdk11
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          eval mvn $NATIVE_TEST_MAVEN_OPTS -Pnative package
      - name: Prepare archive
        shell: bash
        run: find . -name 'xml-builder-*-runner' -type f | tar -czvf native-container-artifacts.tgz -T -
      - name: Upload Archive
        uses: actions/upload-artifact@v1
        with:
          name: native-container-artifacts
          path: 'native-container-artifacts.tgz'

  native-container-images:
    name: Release Native Container Images
    needs: native-container-artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Native Artifacts
        uses: actions/download-artifact@v1
        with:
          name: native-container-artifacts
          path: .
      - name: Extract Native Artifacs
        shell: bash
        run: tar -xzvf native-container-artifacts.tgz
      - name: Publish to Registry XML Builder (Release tag)
        # Uses sha for added security since tags can be updated
        uses: elgohr/Publish-Docker-Github-Action@b2f63259b466ca5a4be395c392546de447450334
        with:
          name: projectopenubl/xml-builder
          dockerfile: api/src/main/docker/Dockerfile.native
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_names: true
      - name: Publish to Registry XML Builder (Release latest)
        # Uses sha for added security since tags can be updated
        uses: elgohr/Publish-Docker-Github-Action@b2f63259b466ca5a4be395c392546de447450334
        with:
          name: projectopenubl/xml-builder
          dockerfile: api/src/main/docker/Dockerfile.native
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: "latest"

  native-linux-artifacts:
    name: Native Linux Artifacts
    needs: build-jdk11
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Install graalvm
        uses: DeLaGuardo/setup-graalvm@3
        with:
          graalvm-version: '20.0.0.java11'
      - name: Install native-image
        run: gu install native-image
      - name: Build native executable
        run: ./mvnw package -Dnative
      - name: Prepare archive
        shell: bash
        run: find . -name 'xml-builder-*-runner' -type f | tar -czvf native-linux-artifacts.tgz -T -
      - name: Upload Archive
        uses: actions/upload-artifact@v1
        with:
          name: native-linux-artifacts
          path: 'native-linux-artifacts.tgz'

  native-windows-artifacts:
    name: Native Windows Artifacts
    needs: build-jdk11
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Install graalvm
        uses: DeLaGuardo/setup-graalvm@3
        with:
          graalvm-version: '20.0.0.java11'
      - name: Install native-image
        run: |
          %JAVA_HOME%/bin/gu.cmd install native-image
        shell: cmd
      - name: Configure Pagefile
        # Increased the page-file size due to memory-consumption of native-image command
        # For details see https://github.com/actions/virtual-environments/issues/785
        uses: al-cheb/configure-pagefile-action@v1.2
      - name: Build native executable
        # Invoke the native-image build with the necessary Visual Studio tooling/environment intialized
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
          mvnw package -Dnative"
        shell: cmd
      - name: Prepare failure archive
        shell: bash
        run: |
          # Disambiguate windows find from cygwin find
          /usr/bin/find . -name 'xml-builder-*-runner.exe' -type f | tar -czvf native-windows-artifacts.tgz -T -
      - name: Upload failure Archive
        uses: actions/upload-artifact@v1
        with:
          name: native-windows-artifacts
          path: 'native-windows-artifacts.tgz'

  native-macos-artifacts:
    name: Native MacOS Artifacts
    needs: build-jdk11
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Install graalvm
        uses: DeLaGuardo/setup-graalvm@3
        with:
          graalvm-version: '20.0.0.java11'
      - name: Install native-image
        run: gu install native-image
      - name: Build native executable
        run: ./mvnw package -Dnative
      - name: Prepare archive
        shell: bash
        run: find . -name 'xml-builder-*-runner' -type f | tar -czvf native-macos-artifacts.tgz -T -
      - name: Upload Archive
        uses: actions/upload-artifact@v1
        with:
          name: native-macos-artifacts
          path: 'native-macos-artifacts.tgz'

  release-gh:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [native-container-images, java-artifacts, native-linux-artifacts, native-windows-artifacts, native-macos-artifacts]
    steps:
      - uses: actions/checkout@v2
      - name: changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        id: Changelog
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          REPO: ${{ github.repository }}
      - name: Create Release
        id: create_release
        # Uses sha for added security since tags can be updated
        uses: actions/create-release@8f324cdc2e5470815db0a286b4b3aa7803c0e6ef
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: false
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Download Java Artifacts
        uses: actions/download-artifact@v1
        with:
          name: jvm-artifacts
          path: .
      - name: Upload Release JVM Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./jvm-artifacts.tgz
          asset_name: xml-builder-api-${{ steps.get_version.outputs.VERSION }}-jvm.tgz
          asset_content_type: application/tar+gzip

      - name: Clear for Linux Release
        run: rm -rf ./api/target
      - name: Download Linux Native Artifacts
        uses: actions/download-artifact@v1
        with:
          name: native-linux-artifacts
          path: .
      - name: Extract Native Linux artifacts
        shell: bash
        run: tar -xzvf native-linux-artifacts.tgz
      - name: Upload Release Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./api/target/xml-builder-api-${{ steps.get_version.outputs.VERSION }}-runner
          asset_name: xml-builder-api-${{ steps.get_version.outputs.VERSION }}-linux
          asset_content_type: application/octet-stream

      - name: Clear for Windows Release
        run: rm -rf ./api/target
      - name: Download Windows Native Artifacts
        uses: actions/download-artifact@v1
        with:
          name: native-windows-artifacts
          path: .
      - name: Extract Native Windows artifacts
        shell: bash
        run: tar -xzvf native-windows-artifacts.tgz
      - name: Upload Release Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./api/target/xml-builder-api-${{ steps.get_version.outputs.VERSION }}-runner.exe
          asset_name: xml-builder-api-${{ steps.get_version.outputs.VERSION }}-win64.exe
          asset_label: win64
          asset_content_type: application/octet-stream

      - name: Clear for MacOS Release
        run: rm -rf ./api/target
      - name: Download MacOS Native Artifacts
        uses: actions/download-artifact@v1
        with:
          name: native-macos-artifacts
          path: .
      - name: Extract Native MacOS artifacts
        shell: bash
        run: tar -xzvf native-macos-artifacts.tgz
      - name: Upload Release MacOS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./api/target/xml-builder-api-${{ steps.get_version.outputs.VERSION }}-runner
          asset_name: xml-builder-api-${{ steps.get_version.outputs.VERSION }}-macos
          asset_label: macos
          asset_content_type: application/octet-stream

  release-maven:
    name: "Release Maven"
    runs-on: ubuntu-latest
    needs: [build-jdk11, release-gh]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Release Maven package
        uses: samuelmeuli/action-maven-publish@v1
        with:
          gpg_private_key: ${{ secrets.gpg_private_key }}
          gpg_passphrase: ${{ secrets.gpg_passphrase }}
          nexus_username: ${{ secrets.nexus_username }}
          nexus_password: ${{ secrets.nexus_password }}
