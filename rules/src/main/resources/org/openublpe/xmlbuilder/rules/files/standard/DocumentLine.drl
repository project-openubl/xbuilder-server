package org.openublpe.xmlbuilder.rules.files.standard;

import org.openublpe.xmlbuilder.core.models.input.standard.DocumentInputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.DocumentOutputModel;

import org.openublpe.xmlbuilder.core.models.input.standard.DocumentLineInputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.DocumentLineOutputModel;

import org.openublpe.xmlbuilder.rules.files.standard.DocumentInputOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoIGVOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoISCOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoICBOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.DetallePrecioReferenciaOutputModel;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.math.RoundingMode;

import org.openublpe.xmlbuilder.core.models.catalogs.Catalog;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog5;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog7;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog7_1;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog16
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog8;

import function org.openublpe.xmlbuilder.rules.utils.NumberUtils.format2Digists;

global java.math.BigDecimal IGV;
global java.math.BigDecimal ICB;
global java.lang.String DEFAULT_UNIDAD_MEDIDA;
global org.openublpe.xmlbuilder.core.models.catalogs.Catalog7 DEFAULT_TIPO_IGV;

dialect "java"

declare DocumentLineInputOutputModel
    input : DocumentLineInputModel
    output : DocumentLineOutputModel
end

declare DocumentLineProcessorModel
    documentLineInputOutput : DocumentLineInputOutputModel @key
    ready : Boolean
    igvTipo : Catalog7
    igvCategoria : Catalog5
    iscValor: BigDecimal
    iscBaseImponible: BigDecimal
    iscImporte: BigDecimal
    iscTipo : Catalog8
    iscCategoria : Catalog5
    igvValor: BigDecimal
    igvBaseImponible: BigDecimal
    igvImporte: BigDecimal
    otroImpuestoCategoria : Catalog5
    otroImpuestoValor: BigDecimal
    otroImpuestoBaseImponible: BigDecimal
    otroImpuestoImporte: BigDecimal
    icbCategoria : Catalog5
    icbValor : BigDecimal
    icbImporte : BigDecimal
end

declare DocumentLineLeftToRightProcessorModel extends DocumentLineProcessorModel

end

declare DocumentLineRightToLeftProcessorModel extends DocumentLineProcessorModel

end


rule "DOCUMENT_LINE_IO_INIT"
when
    $inputOutput : DocumentInputOutputModel(
        $input : input,
        $output : output,
        $input.detalle != null
    )
then
    $output.setDetalle(new ArrayList<>());
    $input.getDetalle().forEach(detalleInput -> {
        DocumentLineOutputModel detalleOutput = new DocumentLineOutputModel();
        $output.getDetalle().add(detalleOutput);

        insert(new DocumentLineInputOutputModel(detalleInput, detalleOutput));
    });
end


rule "DOCUMENT_LINE_IO"
when
    $inputOutput : DocumentLineInputOutputModel(
        $input: input,
        $output: output
    )
then
    $output.setDescripcion($input.getDescripcion());
    $output.setCantidad($input.getCantidad());
    $output.setValorUnitario($input.getValorUnitario());
    $output.setPrecioUnitario($input.getPrecioUnitario());
    $output.setUnidadMedida($input.getUnidadMedida() != null ? $input.getUnidadMedida() : DEFAULT_UNIDAD_MEDIDA);

    // Init precios de referencia
    $output.setPrecioDeReferencia(new DetallePrecioReferenciaOutputModel());

    //
    if ($output.getValorUnitario() != null) {
        insert(new DocumentLineLeftToRightProcessorModel($inputOutput));
    } else if ($output.getPrecioUnitario() != null) {
        insert(new DocumentLineRightToLeftProcessorModel($inputOutput));
    }
end

rule "DOCUMENT_LINE_LEFT_TO_RIGHT"
when
    $processor : DocumentLineLeftToRightProcessorModel(
        $inputOutput : documentLineInputOutput
    )
then
    DocumentLineInputModel input = $inputOutput.getInput();
    DocumentLineOutputModel output = $inputOutput.getOutput();

    BigDecimal subtotal = format2Digists(input.getCantidad().multiply(input.getValorUnitario()));

    // ISC
    Catalog8 iscTipo = null;
    Catalog5 iscCategoria = null;
    BigDecimal iscValor = null;
    BigDecimal iscBaseImponible = null;
    BigDecimal iscImporte = null;

    if (input.getTipoIsc() != null) {
      iscTipo = Catalog.valueOfCode(Catalog8.class, input.getTipoIsc()).get();
      iscCategoria = Catalog5.ISC;
      iscValor = new BigDecimal("0.18"); // Define correct way of calculating this value
      iscBaseImponible = subtotal;
      iscImporte = subtotal.multiply(iscBaseImponible);
    }

    // IGV
    Catalog7 igvTipo = null;
    Catalog5 igvCategoria = null;
    BigDecimal igvValor = null;
    BigDecimal igvBaseImponible = null;
    BigDecimal igvImporte = null;
    if (input.getTipoIgv() != null) {
      igvTipo = Catalog.valueOfCode(Catalog7.class, input.getTipoIgv()).get();
      igvCategoria = Catalog5.IGV;
      igvValor = igvTipo.getGrupo().equals(Catalog7_1.GRAVADO) ? IGV : BigDecimal.ZERO;
      igvBaseImponible = subtotal.add(iscImporte != null ? iscImporte : BigDecimal.ZERO);
      igvImporte = igvValor.multiply(igvBaseImponible);
    }

    // ICB
    Catalog5 icbCategoria = null;
    BigDecimal icbValor = null;
    BigDecimal icbImporte = null;
    if (input.getTipoIgv() != null) {
      igvCategoria = Catalog5.ICBPER;
      icbValor = ICB;
      icbImporte = format2Digists(input.getCantidad().multiply(igvBaseImponible));
    }

    modify($processor){
        setReady(true)
    };
end

rule "DOCUMENT"
when
    $processor: DocumentLineProcessorModel(
        ready == true,
        $inputOutput : documentLineInputOutput
    )
then
    DocumentLineInputModel input = $inputOutput.getInput();
    DocumentLineOutputModel output = $inputOutput.getOutput();

    BigDecimal importeTotalImpuestos = BigDecimal.ZERO;

    // isc
    if (input.getTipoIsc() != null) {
        output.setIsc(new ImpuestoDetalladoISCOutputModel());

        output.getIsc().setTipo($processor.getIscTipo());
        output.getIsc().setCategoria($processor.getIscCategoria());
        output.getIsc().setPorcentaje($processor.getIscValor().multiply(new BigDecimal("100")));
        output.getIsc().setBaseImponible($processor.getIscBaseImponible());
        output.getIsc().setImporte($processor.getIscImporte());

        importeTotalImpuestos = importeTotalImpuestos.add($processor.getIscImporte());
    }

    // igv
    if (input.getTipoIgv() != null) {
        output.setIgv(new ImpuestoDetalladoIGVOutputModel());

        output.getIgv().setTipo($processor.getIgvTipo());
        output.getIgv().setCategoria($processor.getIgvCategoria());
        output.getIgv().setPorcentaje($processor.getIgvValor().multiply(new BigDecimal("100")));
        output.getIgv().setBaseImponible($processor.getIgvBaseImponible());
        output.getIgv().setImporte($processor.getIgvImporte());

        importeTotalImpuestos = importeTotalImpuestos.add($processor.getIgvImporte());
    }

    // otro tributo
    if (input.getOtrosTributos() != null) {
        output.setOtroTributo(new ImpuestoDetalladoOutputModel());

        output.getOtroTributo().setCategoria($processor.getOtroImpuestoCategoria());
        output.getOtroTributo().setPorcentaje($processor.getOtroImpuestoValor().multiply(new BigDecimal("100")));
        output.getOtroTributo().setBaseImponible($processor.getOtroImpuestoBaseImponible());
        output.getOtroTributo().setImporte($processor.getOtroImpuestoImporte());

        importeTotalImpuestos = importeTotalImpuestos.add($processor.getOtroImpuestoImporte());
    }

    output.setImporteTotalImpuestos(importeTotalImpuestos);
end
