package org.openublpe.xmlbuilder.rules.files.standard;

import org.openublpe.xmlbuilder.core.models.input.standard.DocumentInputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.DocumentOutputModel;

import org.openublpe.xmlbuilder.core.models.input.standard.DocumentLineInputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.DocumentLineOutputModel;

import org.openublpe.xmlbuilder.core.models.inputoutput.DocumentInputOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoIGVOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoISCOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.ImpuestoDetalladoICBOutputModel;
import org.openublpe.xmlbuilder.core.models.output.standard.DocumentLinePrecioReferenciaOutputModel;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.math.RoundingMode;

import org.openublpe.xmlbuilder.core.models.catalogs.Catalog;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog5;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog7;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog7_1;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog8;
import org.openublpe.xmlbuilder.core.models.catalogs.Catalog16;

global java.math.BigDecimal IGV;
global java.math.BigDecimal ICB;
global java.lang.String DEFAULT_UNIDAD_MEDIDA;
global org.openublpe.xmlbuilder.core.models.catalogs.Catalog7 DEFAULT_TIPO_IGV;

dialect "java"

declare DocumentLineInputOutputModel
    input : DocumentLineInputModel
    output : DocumentLineOutputModel
end

declare DocumentLineProcessorModel
    documentLineInputOutput : DocumentLineInputOutputModel @key
    ready : Boolean
    valorUnitario : BigDecimal
    precioUnitario : BigDecimal
    valorVenta : BigDecimal
    igvTipo : Catalog7
    igvCategoria : Catalog5
    iscValor: BigDecimal
    iscBaseImponible: BigDecimal
    iscImporte: BigDecimal
    iscTipo : Catalog8
    iscCategoria : Catalog5
    igvValor: BigDecimal
    igvBaseImponible: BigDecimal
    igvImporte: BigDecimal
    otroImpuestoCategoria : Catalog5
    otroImpuestoValor: BigDecimal
    otroImpuestoBaseImponible: BigDecimal
    otroImpuestoImporte: BigDecimal
    icbCategoria : Catalog5
    icbValor : BigDecimal
    icbImporte : BigDecimal
end

declare DocumentLineLeftToRightProcessorModel extends DocumentLineProcessorModel
// FORMULA LEFT TO RIGHT - Having Cantidad and ValorUnitario (price without taxes)
//
// SUBTOTAL
// ---------------------------------
// subtotal = cantidad * valorUnitario;
//
// ISC
// ---------------------------------
// iscTipo = Catalog8;
// iscCategoria = Catalog5;
// iscValor = 0.02;
// iscBaseImponible = subtotal;
// iscImporte = iscValor/100 * iscBaseImponible;
//
// IGV
// ---------------------------------
// igvTipo = Catalog7;
// igvCategoria = Catalog5;
// igvValor = 0.18;
// igvBaseImponible = subtotal + importeISC;
// igvImporte = igvValor * baseImponibleIGV;
//
// OTROS
// ---------------------------------
// otroCategoria = Catalog5;
// otroValor = 0.1;
// otroBaseImponible = subtotal + iscImporte + igvImporte;
// otroImporte = otroValor * otroBaseImponible;
//
// ICBPER
// ---------------------------------
// icbCategoria = Catalog5;
// icbValor = 0.2;
// icbImporte = cantidad * icbValor;
//
end

declare DocumentLineRightToLeftProcessorModel extends DocumentLineProcessorModel
// FORMULA RIGHT TO LEFT - Having Cantidad and PrecioUnitario (price with taxes)
//
// SUBTOTAL
// ---------------------------------
// total = cantidad * PrecioUnitario;
//
// IGV
// ---------------------------------
// igvTipo = Catalog7;
// igvCategoria = Catalog5;
// igvValor = 0.18 o 0 dependiendo si es GRAVADO;
// igvBaseImponible = total / (igvValor + 1);
// igvImporte = total - igvBaseImponible;
//
// ISC
// ---------------------------------
// iscTipo = Catalog8;
// iscCategoria = Catalog5;
// iscValor = 0.02;
// iscBaseImponible = igvBaseImponible / (iscValor + 1);
// iscImporte = igvBaseImponible - iscBaseImponible;
//
// ICBPER
// ---------------------------------
// categoriaICB = Catalog5;
// icbAplicado = 0.2;
// importeICB = cantidad * icbAplicado;
//
// VALOR UNITARIO
// ---------------------------------
// igvBaseImponible / 1.02
end


rule "DOCUMENT_LINE_IO_INIT"
when
    $inputOutput : DocumentInputOutputModel(
        $input : input,
        $output : output,
        $input.detalle != null,
        $output.detalle == null
    )
then
    $output.setDetalle(new ArrayList<>());
    $input.getDetalle().forEach(detalleInput -> {
        DocumentLineOutputModel detalleOutput = new DocumentLineOutputModel();
        $output.getDetalle().add(detalleOutput);

        insert(new DocumentLineInputOutputModel(detalleInput, detalleOutput));
    });
end


rule "DOCUMENT_LINE_IO"
when
    $inputOutput : DocumentLineInputOutputModel(
        $input: input,
        $output: output
    )
then
    $output.setDescripcion($input.getDescripcion());
    $output.setUnidadMedida($input.getUnidadMedida() != null ? $input.getUnidadMedida() : DEFAULT_UNIDAD_MEDIDA);

    $output.setCantidad($input.getCantidad());
    $output.setPrecioSinImpuestos($input.getPrecioSinImpuestos());
    $output.setPrecioConImpuestos($input.getPrecioConImpuestos());

    //
    if ($output.getPrecioSinImpuestos() != null) {
        insert(new DocumentLineLeftToRightProcessorModel($inputOutput));
    } else if ($output.getPrecioConImpuestos() != null) {
        insert(new DocumentLineRightToLeftProcessorModel($inputOutput));
    }
end


rule "DOCUMENT_LINE_PROCESSOR_LEFT_TO_RIGHT"
when
    $processor : DocumentLineLeftToRightProcessorModel(
        $inputOutput : documentLineInputOutput
    )
then
    DocumentLineInputModel input = $inputOutput.getInput();
    DocumentLineOutputModel output = $inputOutput.getOutput();

    // Subtotal
    BigDecimal subtotal = input.getCantidad().multiply(input.getPrecioSinImpuestos()).setScale(2, RoundingMode.HALF_EVEN);

    // ISC
    Catalog8 iscTipo = null;
    Catalog5 iscCategoria = null;
    BigDecimal iscValor = null;
    BigDecimal iscBaseImponible = null;
    BigDecimal iscImporte = null;

    if (input.getTipoIsc() != null) {
      iscTipo = Catalog.valueOfCode(Catalog8.class, input.getTipoIsc()).get();
      iscCategoria = Catalog5.ISC;
      iscValor = new BigDecimal("0.02"); // Define correct way of calculating this value
      iscBaseImponible = subtotal;
      iscImporte = iscBaseImponible.multiply(iscValor);
    }

    // IGV
    Catalog7 igvTipo = null;
    Catalog5 igvCategoria = null;
    BigDecimal igvValor = null;
    BigDecimal igvBaseImponible = null;
    BigDecimal igvImporte = null;

    igvTipo = input.getTipoIgv() != null ? Catalog.valueOfCode(Catalog7.class, input.getTipoIgv()).get() : DEFAULT_TIPO_IGV;
    igvCategoria = Catalog5.IGV;
    igvValor = igvTipo.getGrupo().equals(Catalog7_1.GRAVADO) ? IGV : BigDecimal.ZERO;
    igvBaseImponible = subtotal.add(iscImporte != null ? iscImporte : BigDecimal.ZERO);
    igvImporte = igvBaseImponible.multiply(igvValor);

    // ICB
    Catalog5 icbCategoria = null;
    BigDecimal icbValor = null;
    BigDecimal icbImporte = null;
    if (input.isIcb()) {
      icbCategoria = Catalog5.ICBPER;
      icbValor = ICB;
      icbImporte = input.getCantidad().multiply(icbValor).setScale(2, RoundingMode.HALF_EVEN);
    }

    //
    modify($processor){
        setReady(true),
        setIscTipo(iscTipo),
        setIscCategoria(iscCategoria),
        setIscValor(iscValor),
        setIscBaseImponible(iscBaseImponible),
        setIscImporte(iscImporte),
        setIgvTipo(igvTipo),
        setIgvCategoria(igvCategoria),
        setIgvValor(igvValor),
        setIgvBaseImponible(igvBaseImponible),
        setIgvImporte(igvImporte),
        setIcbCategoria(icbCategoria),
        setIcbValor(icbValor),
        setIcbImporte(icbImporte)
    };
end

rule "DOCUMENT_LINE_PROCESSOR_RIGHT_TO_LEFT"
when
    $processor : DocumentLineRightToLeftProcessorModel(
        $inputOutput : documentLineInputOutput
    )
then
    DocumentLineInputModel input = $inputOutput.getInput();
    DocumentLineOutputModel output = $inputOutput.getOutput();

    // Total
    BigDecimal total = input.getCantidad().multiply(input.getPrecioConImpuestos()).setScale(2, RoundingMode.HALF_EVEN);

    // IGV
    Catalog7 igvTipo = null;
    Catalog5 igvCategoria = null;
    BigDecimal igvValor = null;
    BigDecimal igvBaseImponible = null;
    BigDecimal igvImporte = null;

    igvTipo = input.getTipoIgv() != null ? Catalog.valueOfCode(Catalog7.class, input.getTipoIgv()).get() : DEFAULT_TIPO_IGV;
    igvCategoria = Catalog5.IGV;
    igvValor = igvTipo.getGrupo().equals(Catalog7_1.GRAVADO) ? IGV : BigDecimal.ZERO;
    igvBaseImponible = total.divide(igvValor.add(BigDecimal.ONE), 2, RoundingMode.HALF_EVEN);
    igvImporte = total.subtract(igvBaseImponible);

    // ISC
    Catalog8 iscTipo = null;
    Catalog5 iscCategoria = null;
    BigDecimal iscValor = null;
    BigDecimal iscBaseImponible = null;
    BigDecimal iscImporte = null;

    if (input.getTipoIsc() != null) {
      iscTipo = Catalog.valueOfCode(Catalog8.class, input.getTipoIsc()).get();
      iscCategoria = Catalog5.ISC;
      iscValor = new BigDecimal("0.02"); // Define correct way of calculating this value
      iscBaseImponible = igvBaseImponible.divide(iscValor.add(BigDecimal.ONE), 2, RoundingMode.HALF_EVEN);
      iscImporte = igvBaseImponible.subtract(iscBaseImponible);
    }

    // ICB
    Catalog5 icbCategoria = null;
    BigDecimal icbValor = null;
    BigDecimal icbImporte = null;
    if (input.getTipoIgv() != null) {
      icbCategoria = Catalog5.ICBPER;
      icbValor = ICB;
      icbImporte = input.getCantidad().multiply(icbValor).setScale(2, RoundingMode.HALF_EVEN);
    }

    // Valor de venta (sin impuestos)
    BigDecimal valorVenta = total;
    if (igvTipo.isOperacionOnerosa()) {
        if (igvImporte != null) {
            valorVenta = valorVenta.subtract(igvImporte);
        }
        if (iscImporte != null) {
            valorVenta = valorVenta.subtract(iscImporte);
        }
    }

    // Valor unitario (precio sin impuestos)
    BigDecimal valorUnitario = valorVenta.divide(input.getCantidad(), 2, RoundingMode.HALF_EVEN);

    // Precio unitario (precio con impuestos)
    BigDecimal precioUnitario = input.getPrecioConImpuestos();

    modify($processor){
        setReady(true),
        setValorUnitario(valorUnitario),
        setPrecioUnitario(precioUnitario),
        setValorVenta(valorVenta),
        setIscTipo(iscTipo),
        setIscCategoria(iscCategoria),
        setIscValor(iscValor),
        setIscBaseImponible(iscBaseImponible),
        setIscImporte(iscImporte),
        setIgvTipo(igvTipo),
        setIgvCategoria(igvCategoria),
        setIgvValor(igvValor),
        setIgvBaseImponible(igvBaseImponible),
        setIgvImporte(igvImporte),
        setIcbCategoria(icbCategoria),
        setIcbValor(icbValor),
        setIcbImporte(icbImporte)
    };
end


rule "DOCUMENT_LINE_PROCESSOR_TO_IO"
when
    $processor: DocumentLineProcessorModel(
        ready == true,
        $inputOutput : documentLineInputOutput
    )
then
    DocumentLineInputModel input = $inputOutput.getInput();
    DocumentLineOutputModel output = $inputOutput.getOutput();

    BigDecimal importeTotalImpuestos = BigDecimal.ZERO;

    // isc
    if (input.getTipoIsc() != null) {
        output.setIsc(new ImpuestoDetalladoISCOutputModel());

        output.getIsc().setTipo($processor.getIscTipo());
        output.getIsc().setCategoria($processor.getIscCategoria());
        output.getIsc().setPorcentaje($processor.getIscValor().multiply(new BigDecimal("100")));
        output.getIsc().setBaseImponible($processor.getIscBaseImponible());
        output.getIsc().setImporte($processor.getIscImporte());

        importeTotalImpuestos = importeTotalImpuestos.add($processor.getIscImporte());
    }

    // igv
    output.setIgv(new ImpuestoDetalladoIGVOutputModel());

    output.getIgv().setTipo($processor.getIgvTipo());
    output.getIgv().setCategoria($processor.getIgvCategoria());
    output.getIgv().setPorcentaje($processor.getIgvValor().multiply(new BigDecimal("100")));
    output.getIgv().setBaseImponible($processor.getIgvBaseImponible());
    output.getIgv().setImporte($processor.getIgvImporte());

    importeTotalImpuestos = importeTotalImpuestos.add($processor.getIgvImporte());

    // otro tributo
    if (input.getOtrosTributos() != null) {
        output.setOtroTributo(new ImpuestoDetalladoOutputModel());

        output.getOtroTributo().setCategoria($processor.getOtroImpuestoCategoria());
        output.getOtroTributo().setPorcentaje($processor.getOtroImpuestoValor().multiply(new BigDecimal("100")));
        output.getOtroTributo().setBaseImponible($processor.getOtroImpuestoBaseImponible());
        output.getOtroTributo().setImporte($processor.getOtroImpuestoImporte());

        importeTotalImpuestos = importeTotalImpuestos.add($processor.getOtroImpuestoImporte());
    }

    // Valor unitario
    output.setPrecioSinImpuestos($processor.getValorUnitario());

    // Precio unitario
    output.setPrecioConImpuestos($processor.getPrecioUnitario());

    // Valor de venta
    output.setValorVentaSinImpuestos($processor.getValorVenta());


    // Precio de referencia
    output.setPrecioDeReferencia(new DocumentLinePrecioReferenciaOutputModel());

    output.getPrecioDeReferencia().setPrecio($processor.getPrecioUnitario());
    if ($processor.getIgvTipo().isOperacionOnerosa()) {
        output.getPrecioDeReferencia().setTipoPrecio(Catalog16.PRECIO_UNITARIO_INCLUYE_IGV);
    } else {
        output.getPrecioDeReferencia().setTipoPrecio(Catalog16.VALOR_FERENCIAL_UNITARIO_EN_OPERACIONES_NO_ONEROSAS);
    }


    output.setImporteTotalImpuestos(importeTotalImpuestos);
end
